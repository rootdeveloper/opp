--
-- Create Schema Script 
--   Database Version   : 9.0.1.4.0 
--   TOAD Version       : 8.6.0.38 
--   DB Connect String  : LCDE.DB01 
--   Schema             : ICSSYS 
--   Script Created by  : SYS 
--   Script Created at  : 3/16/2007 2:35:52 PM 
--   Physical Location  :  
--   Notes              :  
--

-- Object Counts: 
--   Database Links: 2 
--   Indexes: 28        Columns: 39         
--   Object Privileges: 32 
--   Sequences: 5 
--   Tables: 13         Columns: 118        Constraints: 24     


DROP SEQUENCE IF EXISTS DOCUMENT_HEADER_ID_SEQ;

CREATE SEQUENCE DOCUMENT_HEADER_ID_SEQ
  START WITH 4759867
  MAXVALUE 9999999999999
  MINVALUE 1;

DROP SEQUENCE IF EXISTS ICS_LOG_ID_SEQ;

CREATE SEQUENCE ICS_LOG_ID_SEQ
  START WITH 2690305
  MAXVALUE 999999999999999
  MINVALUE 1;

DROP SEQUENCE IF EXISTS PERSON_ID_SEQ;

CREATE SEQUENCE PERSON_ID_SEQ
  START WITH 2469769
  MAXVALUE 99999999999999999
  MINVALUE 1;

DROP SEQUENCE IF EXISTS PERSON_INFO_ID_SEQ;

CREATE SEQUENCE PERSON_INFO_ID_SEQ
  START WITH 6427404
  MAXVALUE 99999999999999999
  MINVALUE 1;

DROP SEQUENCE IF EXISTS PERSON_QUEUE_SEQ;

CREATE SEQUENCE PERSON_QUEUE_SEQ
  START WITH 237082
  MAXVALUE 99999999999999999
  MINVALUE 1;

DROP TABLE IF EXISTS PERSON_INFO;

CREATE TABLE PERSON_INFO
(
  PERSON_INFO_ID             NUMERIC             NOT NULL,
  DH_ID                      NUMERIC             NOT NULL,
  LNAME                      VARCHAR(64),
  FNAME                      VARCHAR(64),
  SECNAME                    VARCHAR(64),
  SUFFIX                     VARCHAR(64),
  PREFIX                     VARCHAR(64),
  DEGREE                     VARCHAR(64),
  NAME_TYPE_CD               VARCHAR(64),
  NAME_TYPE_REP_CD           VARCHAR(64),
  SEARCH_KEY                 VARCHAR(64),
  START_DATE                 DATE,
  END_DATE                   DATE,
  ALIAS                      NUMERIC,
  ADDRESS_1                  VARCHAR(64),
  ADDRESS_2                  VARCHAR(64),
  CITY                       VARCHAR(64),
  STATE_PROV                 VARCHAR(64),
  ZIP                        VARCHAR(64),
  COUNTRY                    VARCHAR(64),
  PARISH_CD                  VARCHAR(64),
  PA_START_DT                DATE,
  PA_END_DT                  DATE,
  TELECOM_USE_CD             VARCHAR(64),
  PHONE_COUNTRY_CD           VARCHAR(64),
  PHONE_AREA_CD              VARCHAR(64),
  PHONE_NUM                  VARCHAR(64),
  PHONE_EXT                  VARCHAR(64),
  EMAIL                      VARCHAR(64),
  GENDER                     CHAR(1),
  MARITAL_STATUS             CHAR(1),
  DRV_LICENSE_NUM            VARCHAR(64),
  DRV_LICENSE_ISSUING_STATE  CHAR(2),
  DRV_LICENSE_ISSUE_DATE     DATE,
  ETHNIC_GROUP_CD            VARCHAR(64),
  RELIGION_TYPE_CD           VARCHAR(64),
  RACE_CD                    VARCHAR(64),
  PI_IDENTIFIER_TYPE_CD      VARCHAR(64),
  PI_EFFECTIVE_DATE          DATE,
  PI_EXPIRATION_DATE         DATE,
  PATIENT_CONSENT            NUMERIC,
  ADDRESS_TYPE_CD            VARCHAR(64),
  AA_UNIV_ID                 VARCHAR(64),
  AA_UNIV_ID_TYPE_CD         VARCHAR(64),
  AA_NAMESPACE_ID            VARCHAR(64),
  AF_UNIV_ID                 VARCHAR(64),
  AF_UNIV_ID_TYPE_CD         VARCHAR(64),
  AF_NAMESPACE_ID            VARCHAR(64),
  PI_IDENTIFIER              VARCHAR(256),
  SSN                        VARCHAR(64),
  DOB                        DATE,
  CORPORATE_ID               VARCHAR(64),
  UPDATED_CORPORATE_ID       VARCHAR(64)
);

DROP TABLE IF EXISTS ETHNIC_GROUP;

CREATE TABLE ETHNIC_GROUP
(
  ETHNIC_GROUP_CD    VARCHAR(64)          NOT NULL,
  ETHNIC_GROUP_DESC  VARCHAR(64)
);

DROP TABLE IF EXISTS ICS_EVENT_LOG;

CREATE TABLE ICS_EVENT_LOG
(
  ICS_LOG_ID          INTEGER                   NOT NULL,
  EVENT_TYPE          VARCHAR(64),
  EVENT_DATE          TIMESTAMP(6),
  CURRENT_PERSON_ID   INTEGER,
  CURRENT_PERSON_SSN  VARCHAR(64),
  CURRENT_PERSON_DOB  DATE,
  ALT_PERSON_ID       INTEGER,
  ALT_PERSON_SSN      VARCHAR(64),
  ALT_PERSON_DOB      DATE,
  USER_ID             VARCHAR(15),
  REASON              VARCHAR(2000)
);

DROP TABLE IF EXISTS ADDRESS_TYPE;

CREATE TABLE ADDRESS_TYPE
(
  ADDRESS_TYPE_CD    VARCHAR(64)          NOT NULL,
  ADDRESS_TYPE_DESC  VARCHAR(64)
);

DROP TABLE IF EXISTS DOCUMENT_HEADER;

CREATE TABLE DOCUMENT_HEADER
(
  DH_ID          NUMERIC                         NOT NULL,
  PERSON_ID      NUMERIC,
  MSG_DATE       DATE                           NOT NULL,
  MSG_CTRL_ID    VARCHAR(64),
  SEQ_NUM        VARCHAR(64),
  CONT_PTR       VARCHAR(64),
  ACK_TYPE       VARCHAR(64),
  APP_ACK_TYPE   VARCHAR(64),
  MSG_SECURITY   VARCHAR(64),
  REC_APP        VARCHAR(64),
  REC_FAC        VARCHAR(64),
  SEND_APP       VARCHAR(64),
  SEND_FAC       VARCHAR(64),
  EVENT_CD       VARCHAR(64),
  MSG_TYPE       VARCHAR(64),
  TRIGGER_EVENT  VARCHAR(64),
  MSG_STRUCTURE  VARCHAR(64)
);

DROP TABLE IF EXISTS PERSON_NAME_TYPE;

CREATE TABLE PERSON_NAME_TYPE
(
  PERSON_NAME_TYPE_CD    VARCHAR(64)      NOT NULL,
  PERSON_NAME_TYPE_DESC  VARCHAR(64)
);

DROP TABLE IF EXISTS PERSON_QUEUE_ELEMENT;

CREATE TABLE PERSON_QUEUE_ELEMENT
(
  QUEUE_ID   NUMERIC                             NOT NULL,
  PERSON_ID  NUMERIC                             NOT NULL
);

DROP TABLE IF EXISTS PERSON_QUEUE;

CREATE TABLE PERSON_QUEUE
(
  QUEUE_ID     NUMERIC                           NOT NULL,
  DESCRIPTION  VARCHAR(1000)              NOT NULL,
  USER_ID      VARCHAR(15),
  USER_DOMAIN  VARCHAR(100),
  CREATE_DATE  DATE                             NOT NULL
);

DROP TABLE IF EXISTS PERSON;

CREATE TABLE PERSON
(
  PERSON_ID                NUMERIC               NOT NULL,
  NATIONALITY_CD           VARCHAR(64),
  NAMESEARCHKEY            VARCHAR(64),
  PRIMARYLANGUAGE_CD       VARCHAR(64),
  EXPIRED                  NUMERIC,
  ISPROVIDER               NUMERIC,
  MAIDEN_LNAME             VARCHAR(64),
  MAIDEN_FNAME             VARCHAR(64),
  MAIDEN_SECNAME           VARCHAR(64),
  MAIDEN_SUFFIX            VARCHAR(64),
  MAIDEN_PREFIX            VARCHAR(64),
  MAIDEN_DEGREE            VARCHAR(64),
  MAIDEN_NAME_TYPE_CD      VARCHAR(64),
  MAIDEN_NAME_TYPE_REP_CD  VARCHAR(64),
  MAIDEN_SEARCH_KEY        VARCHAR(64),
  BIRTHPLACE               VARCHAR(64)
);

DROP TABLE IF EXISTS LANGUAGE;

CREATE TABLE LANGUAGE
(
  LANGUAGE_CD    VARCHAR(64)              NOT NULL,
  LANGUAGE_DESC  VARCHAR(64)
);

DROP TABLE IF EXISTS NATIONALITY;

CREATE TABLE NATIONALITY
(
  NATIONALITY_CD    VARCHAR(64)           NOT NULL,
  NATIONALITY_DESC  VARCHAR(64)
);

DROP TABLE IF EXISTS RACE;

CREATE TABLE RACE
(
  RACE_CD    VARCHAR(64)                  NOT NULL,
  RACE_DESC  VARCHAR(64)
);

DROP TABLE IF EXISTS RELIGION_TYPE;

CREATE TABLE RELIGION_TYPE
(
  RELIGION_TYPE_CD    VARCHAR(64)         NOT NULL,
  RELIGION_TYPE_DESC  VARCHAR(64)
);


CREATE INDEX DH_DHID_PID ON DOCUMENT_HEADER
(DH_ID, PERSON_ID);


CREATE INDEX DH_PID_DHID ON DOCUMENT_HEADER
(PERSON_ID, DH_ID);


CREATE INDEX IEL_ILI_ET_ED ON ICS_EVENT_LOG
(ICS_LOG_ID, EVENT_TYPE, EVENT_DATE);


CREATE INDEX PI_ATC ON PERSON_INFO
(ADDRESS_TYPE_CD);


CREATE INDEX PI_DHID_PIID ON PERSON_INFO
(DH_ID, PI_IDENTIFIER);


CREATE INDEX PI_EGC ON PERSON_INFO
(ETHNIC_GROUP_CD);


CREATE INDEX PI_LN_FN ON PERSON_INFO
(LNAME, FNAME);

CREATE INDEX PI_NTC ON PERSON_INFO
(NAME_TYPE_CD);

CREATE INDEX PI_PIID_SK ON PERSON_INFO
(PI_IDENTIFIER, SEARCH_KEY);

CREATE INDEX PI_RC ON PERSON_INFO
(RACE_CD);

CREATE INDEX PI_RTC ON PERSON_INFO
(RELIGION_TYPE_CD);

CREATE INDEX PI_SK_DHID ON PERSON_INFO
(SEARCH_KEY, DH_ID);

CREATE INDEX PI_SSN_SK_DHID ON PERSON_INFO
(SSN, SEARCH_KEY, DH_ID);

CREATE INDEX PI_UPPPI_DHID ON PERSON_INFO
(UPPER(PI_IDENTIFIER), DH_ID);

CREATE UNIQUE INDEX PQ_QID_UQ ON PERSON_QUEUE
(QUEUE_ID);

CREATE INDEX P_NC ON PERSON
(NATIONALITY_CD);

CREATE INDEX P_PLC ON PERSON
(PRIMARYLANGUAGE_CD);

ALTER TABLE ADDRESS_TYPE ADD
  PRIMARY KEY
 (ADDRESS_TYPE_CD);

ALTER TABLE DOCUMENT_HEADER ADD
  PRIMARY KEY
 (DH_ID);

ALTER TABLE ETHNIC_GROUP ADD
  PRIMARY KEY
 (ETHNIC_GROUP_CD);

ALTER TABLE ICS_EVENT_LOG ADD
  PRIMARY KEY
 (ICS_LOG_ID);

ALTER TABLE LANGUAGE ADD
  PRIMARY KEY
 (LANGUAGE_CD);

ALTER TABLE NATIONALITY ADD
  PRIMARY KEY
 (NATIONALITY_CD);

ALTER TABLE PERSON ADD
  PRIMARY KEY
 (PERSON_ID);

ALTER TABLE PERSON_INFO ADD
  PRIMARY KEY
 (PERSON_INFO_ID);

ALTER TABLE PERSON_NAME_TYPE ADD
  PRIMARY KEY
 (PERSON_NAME_TYPE_CD);

ALTER TABLE RACE ADD
  PRIMARY KEY
 (RACE_CD);

ALTER TABLE RELIGION_TYPE ADD
  PRIMARY KEY
 (RELIGION_TYPE_CD);

ALTER TABLE DOCUMENT_HEADER ADD
  CONSTRAINT DH_PRID_TO_PR_PRID_FKEY 
 FOREIGN KEY (PERSON_ID) 
 REFERENCES PERSON (PERSON_ID)
    ON DELETE CASCADE;

ALTER TABLE ICS_EVENT_LOG ADD
  CONSTRAINT EVENT_ALT_PERSON_FKEY 
 FOREIGN KEY (ALT_PERSON_ID) 
 REFERENCES PERSON (PERSON_ID)
    ON DELETE NO ACTION;

ALTER TABLE ICS_EVENT_LOG ADD
  CONSTRAINT EVENT_PERSON_FKEY 
 FOREIGN KEY (CURRENT_PERSON_ID) 
 REFERENCES PERSON (PERSON_ID)
    ON DELETE NO ACTION;

ALTER TABLE PERSON ADD
  CONSTRAINT LANGUAGE_FKEY 
 FOREIGN KEY (PRIMARYLANGUAGE_CD) 
 REFERENCES LANGUAGE (LANGUAGE_CD);

ALTER TABLE PERSON ADD
  CONSTRAINT NATIONALITY_FKEY 
 FOREIGN KEY (NATIONALITY_CD) 
 REFERENCES NATIONALITY (NATIONALITY_CD);

ALTER TABLE PERSON_INFO ADD
  CONSTRAINT ADDRESS_FKEY 
 FOREIGN KEY (ADDRESS_TYPE_CD) 
 REFERENCES ADDRESS_TYPE (ADDRESS_TYPE_CD);

ALTER TABLE PERSON_INFO ADD
  CONSTRAINT ETHNIC_FKEY 
 FOREIGN KEY (ETHNIC_GROUP_CD) 
 REFERENCES ETHNIC_GROUP (ETHNIC_GROUP_CD);

ALTER TABLE PERSON_INFO ADD
  CONSTRAINT PER_NAME_TYPE_FKEY 
 FOREIGN KEY (NAME_TYPE_CD) 
 REFERENCES PERSON_NAME_TYPE (PERSON_NAME_TYPE_CD);

ALTER TABLE PERSON_INFO ADD
  CONSTRAINT PI_DHID_TO_DH_DHID_FKEY 
 FOREIGN KEY (DH_ID) 
 REFERENCES DOCUMENT_HEADER (DH_ID)
    ON DELETE CASCADE;

ALTER TABLE PERSON_INFO ADD
  CONSTRAINT RACE_FKEY 
 FOREIGN KEY (RACE_CD) 
 REFERENCES RACE (RACE_CD);

ALTER TABLE PERSON_INFO ADD
  CONSTRAINT RELIGION_FKEY 
 FOREIGN KEY (RELIGION_TYPE_CD) 
 REFERENCES RELIGION_TYPE (RELIGION_TYPE_CD);

ALTER TABLE PERSON_QUEUE_ELEMENT ADD
  CONSTRAINT PQE_PID_P_PID_FK 
 FOREIGN KEY (PERSON_ID) 
 REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_QUEUE_ELEMENT ADD
  CONSTRAINT PQE_QID_PQ_QID_FK 
 FOREIGN KEY (QUEUE_ID) 
 REFERENCES PERSON_QUEUE (QUEUE_ID);

GRANT REFERENCES, SELECT ON  PERSON TO openempi;

GRANT SELECT ON  ADDRESS_TYPE TO openempi;

GRANT SELECT ON  DOCUMENT_HEADER TO openempi;

GRANT SELECT ON  ETHNIC_GROUP TO openempi;

GRANT SELECT ON  ICS_EVENT_LOG TO openempi;

GRANT SELECT ON  LANGUAGE TO openempi;

GRANT SELECT ON  NATIONALITY TO openempi;

GRANT SELECT ON  PERSON TO openempi;

GRANT SELECT ON  PERSON_INFO TO openempi;

GRANT SELECT ON  PERSON_NAME_TYPE TO openempi;

GRANT SELECT ON  PERSON_QUEUE TO openempi;

GRANT SELECT ON  PERSON_QUEUE_ELEMENT TO openempi;

GRANT SELECT ON  RACE TO openempi;

GRANT SELECT ON  RELIGION_TYPE TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  ADDRESS_TYPE TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  DOCUMENT_HEADER TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  DOCUMENT_HEADER_ID_SEQ TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  ETHNIC_GROUP TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  ICS_EVENT_LOG TO openempi;

GRANT SELECT ON  ICS_LOG_ID_SEQ TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  LANGUAGE TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  NATIONALITY TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  PERSON TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  PERSON_ID_SEQ TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  PERSON_INFO TO openempi;

GRANT SELECT ON  PERSON_INFO_ID_SEQ TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  PERSON_NAME_TYPE TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  PERSON_QUEUE TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  PERSON_QUEUE_ELEMENT TO openempi;

GRANT SELECT ON  PERSON_QUEUE_SEQ TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  RACE TO openempi;

GRANT DELETE, INSERT, SELECT, UPDATE ON  RELIGION_TYPE TO openempi;

INSERT INTO ADDRESS_TYPE VALUES ('C', 'Current or Temporary');
INSERT INTO ADDRESS_TYPE VALUES ('P', 'Permanent');
INSERT INTO ADDRESS_TYPE VALUES ('M', 'Mailing');
INSERT INTO ADDRESS_TYPE VALUES ('B', 'Firm/Business');
INSERT INTO ADDRESS_TYPE VALUES ('O', 'Office');
INSERT INTO ADDRESS_TYPE VALUES ('H', 'Home');
INSERT INTO ADDRESS_TYPE VALUES ('N', 'Birth (nee) (birth address, not otherwise specified)');
INSERT INTO ADDRESS_TYPE VALUES ('BDL', 'Birth delivery location (address where birth occurred)');
INSERT INTO ADDRESS_TYPE VALUES ('BR', 'Residence at birth (home address at time of birth)');
INSERT INTO ADDRESS_TYPE VALUES ('F', 'Country Of Origin');
INSERT INTO ADDRESS_TYPE VALUES ('L', 'Legal Address');
INSERT INTO ADDRESS_TYPE VALUES ('RH', 'Registry Home');
INSERT INTO ADDRESS_TYPE VALUES ('BA', 'Bad Address');

INSERT INTO RACE VALUES('AI','American Indian or Alaskan Native');
INSERT INTO RACE VALUES('AP','Asian or Pacific Islander');
INSERT INTO RACE VALUES ('BL', 'Black');
INSERT INTO RACE VALUES('HI','Hispanic');
INSERT INTO RACE VALUES ('WH', 'White');
